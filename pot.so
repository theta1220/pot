
// ./sumi_src/main.ss

var main = octopus.main.new();
main.entry("hello");
// debug.print_block_tree(this);


// ./octopus/sumi/extension/debug.ss
class debug
{
    func print_block_tree(block)
    {
        system_call("Sumi.Lib.Debug.PrintBlockTree", null, block);
    }
}


// ./octopus/sumi/extension/array.ss
extension array
{
    func push(item)
    {
        system_call("Sumi.Lib.Array.Push", null, this, item);
    }

    func pop() : object
    {
        if(this.len() == 0)
        {
            return null;
        }
        var item = this.last();
        system_call("Sumi.Lib.Array.RemoveAt", null, this, this.len() - 1);
        return item;
    }

    func len() : int
    {
        var res = 0;
        system_call("Sumi.Lib.Array.Len", res, this);
        return res;
    }

    func first() : object
    {
        if(this.len() > 0)
        {
            return this[0];
        }
        return null;
    }

    func last() : object
    {
        if(this.Len() > 0)
        {
            return this[this.len()-1];
        }
        return null;
    }

    func remove(item)
    {
        system_call("Sumi.Lib.Array.Remove", null, this, item);
    }
}


// ./octopus/sumi/extension/string.ss
extension string
{
    func to_array()
    {
        var arr = [];
        system_call("Sumi.Lib.String.ToArray", arr, this);
        return arr;
    }

    test to_array()
    {
        var text = "hoge";
        var arr = text.to_array();
        if (arr.len() == 4)
        {
            return true;
        }
        return false;
    }

    func split(sep)
    {
        var res = [];
        var buf = "";
        foreach(c : this.to_array())
        {
            if(c == " ")
            {
                res.push(buf);
                buf = "";
                continue;
            }
            buf = buf + c;
        }
        if(buf != "")
        {
            res.push(buf);
        }
        return res;
    }

    test split()
    {
        var text = "hoge foo bar";
        var arr = text.split(" ");

        if(arr[0] != "hoge")
        {
            return false;
        }
        if(arr[1] != "foo")
        {
            return false;
        }
        if(arr[2] != "bar")
        {
            return false;
        }
        return true;
    }
}


// ./octopus/sumi/extension/log.ss

func log(text, args)
{
    system_call("Pot.Sumi.Log", null, text, args);
}


// ./octopus/sumi/extension/object.ss

class object
{
    func new()
    {
        return @this;
    }
}


// ./octopus/src/main.ss

class octopus
{
    class main : object
    {
        var main_state_machine = base.state_machine.new();

        func entry(text)
        {
            log("command: {0}", text);

            main_state_machine.register(state.title.new());
            main_state_machine.switch("title");
        }
    }
}


// ./octopus/src/state/title/title.ss

class octopus
{
    class state
    {
        class title : object
        {
            var id = "title";
            
            func on_state_began()
            {
                log("titleに遷移しました");
            }

            func on_state_end()
            {
                log("titleをさりました");
            }

            func update()
            {
                log("titleなう");
            }

            func new()
            {
                return @this;
            }
        }
    }
}


// ./octopus/src/system.ss



// ./octopus/src/base/state_machine.ss

class octopus
{
    class base
    {
        class state_machine : object
        {
            var current = null;
            var registered_states = [];

            func find_state(id)
            {
                foreach(state : registered_states)
                {
                    if(state.id == id)
                    {
                        return state;
                    }
                }
                return null;
            }

            func register(state)
            {
                registered_states.push(state);
            }

            func switch(next_id)
            {
                if(current != null)
                {
                    current.on_state_end();
                }
                current = find_state(next_id);
                current.on_state_began();
            }

            func update()
            {
                current.update();
            }
        }
    }
}


